{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eyder andres acalo\\\\OneDrive\\\\Escritorio\\\\proyectos_Carlos\\\\juego_tic_tac_toe\\\\juego\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// Se importa useState desde la biblioteca React\nimport { useState } from 'react';\n// Se importa la biblioteca \"canvas-confetti\" para efectos de confeti\nimport confetti from 'canvas-confetti';\n\n// Se importa el componente Square desde el archivo './components/Square.jsx'\nimport { Square } from './components/Square.jsx';\n// Se importa la constante TURNS desde el archivo './constants.js'\nimport { TURNS } from './constants.js';\n// Se importa las funciones checkWinnerFrom y checkEndGame desde el archivo './logic/board.js'\nimport { checkWinnerFrom, checkEndGame } from './logic/board.js';\n// Se importa el componente WinnerModal desde el archivo './components/WinnerModal.jsx'\nimport { WinnerModal } from './components/WinnerModal.jsx';\n// Se importa las funciones saveGameToStorage y resetGameStorage desde el archivo './logic/storage/index.js'\nimport { saveGameToStorage, resetGameStorage } from './logic/storage/index.js';\n\n// Función principal del componente App\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Estado para el tablero del juego, se inicializa desde el almacenamiento local o con un tablero vacío\n  const [board, setBoard] = useState(() => {\n    const boardFromStorage = window.localStorage.getItem('board');\n    if (boardFromStorage) return JSON.parse(boardFromStorage);\n    return Array(9).fill(null);\n  });\n\n  // Estado para el turno actual, se inicializa desde el almacenamiento local o con el valor de TURNS.X\n  const [turn, setTurn] = useState(() => {\n    const turnFromStorage = window.localStorage.getItem('turn');\n    return turnFromStorage !== null && turnFromStorage !== void 0 ? turnFromStorage : TURNS.X;\n  });\n\n  // Estado para el ganador del juego, se inicia como null\n  const [winner, setWinner] = useState(null);\n\n  // Función para reiniciar el juego\n  const resetGame = () => {\n    setBoard(Array(9).fill(null)); // Restablece el tablero a un estado vacío\n    setTurn(TURNS.X); // Establece el turno inicial en TURNS.X\n    setWinner(null); // Reinicia el ganador a null\n\n    resetGameStorage(); // Limpia el almacenamiento local del juego\n  };\n\n  // Función para actualizar el tablero cuando un jugador realiza un movimiento\n  const updateBoard = index => {\n    if (board[index] || winner) return; // No se actualiza si la casilla ya está ocupada o si hay un ganador\n    const newBoard = [...board]; // Crea una copia del tablero\n    newBoard[index] = turn; // Coloca el símbolo del jugador actual en la casilla\n    setBoard(newBoard); // Actualiza el tablero\n    const newTurn = turn === TURNS.X ? TURNS.O : TURNS.X; // Cambia el turno al siguiente jugador\n    setTurn(newTurn); // Actualiza el turno\n    saveGameToStorage({\n      // Guarda el estado actual del juego en el almacenamiento local\n      board: newBoard,\n      turn: newTurn\n    });\n    const newWinner = checkWinnerFrom(newBoard); // Comprueba si hay un ganador en el nuevo tablero\n    if (newWinner) {\n      confetti(); // Dispara efecto de confeti\n      setWinner(newWinner); // Establece el ganador\n    } else if (checkEndGame(newBoard)) {\n      setWinner(false); // Si no hay ganador, pero se ha llenado el tablero, hay un empate\n    }\n  };\n\n  // Renderiza el contenido del componente\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tic tac toe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGame,\n      children: \"Reset del juego\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"game\",\n      children: board.map((square, index) => {\n        return /*#__PURE__*/_jsxDEV(Square, {\n          index: index,\n          updateBoard: updateBoard,\n          children: square\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"turn\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        isSelected: turn === TURNS.X,\n        children: TURNS.X\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        isSelected: turn === TURNS.O,\n        children: TURNS.O\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WinnerModal, {\n      resetGame: resetGame,\n      winner: winner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n// Exporta el componente App como componente principal\n_s(App, \"JGf4yemCjJukZRVAugyiXbTzdiU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","confetti","Square","TURNS","checkWinnerFrom","checkEndGame","WinnerModal","saveGameToStorage","resetGameStorage","jsxDEV","_jsxDEV","App","_s","board","setBoard","boardFromStorage","window","localStorage","getItem","JSON","parse","Array","fill","turn","setTurn","turnFromStorage","X","winner","setWinner","resetGame","updateBoard","index","newBoard","newTurn","O","newWinner","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","square","isSelected","_c","$RefreshReg$"],"sources":["C:/Users/eyder andres acalo/OneDrive/Escritorio/proyectos_Carlos/juego_tic_tac_toe/juego/src/App.jsx"],"sourcesContent":["// Se importa useState desde la biblioteca React\nimport { useState } from 'react'\n// Se importa la biblioteca \"canvas-confetti\" para efectos de confeti\nimport confetti from 'canvas-confetti';\n\n// Se importa el componente Square desde el archivo './components/Square.jsx'\nimport { Square } from './components/Square.jsx'\n// Se importa la constante TURNS desde el archivo './constants.js'\nimport { TURNS } from './constants.js'\n// Se importa las funciones checkWinnerFrom y checkEndGame desde el archivo './logic/board.js'\nimport { checkWinnerFrom, checkEndGame } from './logic/board.js'\n// Se importa el componente WinnerModal desde el archivo './components/WinnerModal.jsx'\nimport { WinnerModal } from './components/WinnerModal.jsx'\n// Se importa las funciones saveGameToStorage y resetGameStorage desde el archivo './logic/storage/index.js'\nimport { saveGameToStorage, resetGameStorage } from './logic/storage/index.js'\n\n// Función principal del componente App\nfunction App() {\n  // Estado para el tablero del juego, se inicializa desde el almacenamiento local o con un tablero vacío\n  const [board, setBoard] = useState(() => {\n    const boardFromStorage = window.localStorage.getItem('board')\n    if (boardFromStorage) return JSON.parse(boardFromStorage)\n    return Array(9).fill(null)\n  })\n\n  // Estado para el turno actual, se inicializa desde el almacenamiento local o con el valor de TURNS.X\n  const [turn, setTurn] = useState(() => {\n    const turnFromStorage = window.localStorage.getItem('turn')\n    return turnFromStorage ?? TURNS.X\n  })\n\n  // Estado para el ganador del juego, se inicia como null\n  const [winner, setWinner] = useState(null)\n\n  // Función para reiniciar el juego\n  const resetGame = () => {\n    setBoard(Array(9).fill(null)) // Restablece el tablero a un estado vacío\n    setTurn(TURNS.X) // Establece el turno inicial en TURNS.X\n    setWinner(null) // Reinicia el ganador a null\n\n    resetGameStorage() // Limpia el almacenamiento local del juego\n  }\n\n  // Función para actualizar el tablero cuando un jugador realiza un movimiento\n  const updateBoard = (index) => {\n    if (board[index] || winner) return // No se actualiza si la casilla ya está ocupada o si hay un ganador\n    const newBoard = [...board] // Crea una copia del tablero\n    newBoard[index] = turn // Coloca el símbolo del jugador actual en la casilla\n    setBoard(newBoard) // Actualiza el tablero\n    const newTurn = turn === TURNS.X ? TURNS.O : TURNS.X // Cambia el turno al siguiente jugador\n    setTurn(newTurn) // Actualiza el turno\n    saveGameToStorage({ // Guarda el estado actual del juego en el almacenamiento local\n      board: newBoard,\n      turn: newTurn\n    })\n    const newWinner = checkWinnerFrom(newBoard) // Comprueba si hay un ganador en el nuevo tablero\n    if (newWinner) {\n      confetti() // Dispara efecto de confeti\n      setWinner(newWinner) // Establece el ganador\n    } else if (checkEndGame(newBoard)) {\n      setWinner(false) // Si no hay ganador, pero se ha llenado el tablero, hay un empate\n    }\n  }\n\n  // Renderiza el contenido del componente\n  return (\n    <main className='board'>\n      <h1>Tic tac toe</h1>\n      <button onClick={resetGame}>Reset del juego</button>\n      <section className='game'>\n        {\n          board.map((square, index) => {\n            return (\n              <Square\n                key={index}\n                index={index}\n                updateBoard={updateBoard}\n              >\n                {square}\n              </Square>\n            )\n          })\n        }\n      </section>\n\n      <section className='turn'>\n        <Square isSelected={turn === TURNS.X}>\n          {TURNS.X}\n        </Square>\n        <Square isSelected={turn === TURNS.O}>\n          {TURNS.O}\n        </Square>\n      </section>\n\n      {/* Componente WinnerModal para mostrar el resultado del juego */}\n      <WinnerModal resetGame={resetGame} winner={winner} />\n    </main>\n  )\n}\n\n// Exporta el componente App como componente principal\nexport default App\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}