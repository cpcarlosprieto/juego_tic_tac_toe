{"ast":null,"code":"// Se importa la constante WINNER_COMBOS desde el archivo '../constants.js'\nimport { WINNER_COMBOS } from '../constants.js';\n\n// Función para comprobar si hay un ganador en el tablero\nexport const checkWinnerFrom = boardToCheck => {\n  // Itera a través de todas las combinaciones ganadoras\n  // para ver si X u O ganaron\n  for (const combo of WINNER_COMBOS) {\n    const [a, b, c] = combo;\n    if (boardToCheck[a] && boardToCheck[a] === boardToCheck[b] && boardToCheck[a] === boardToCheck[c]) {\n      // Retorna el símbolo del ganador (X o O) si se cumple una combinación ganadora\n      return boardToCheck[a];\n    }\n  }\n  // Si no hay ganador, retorna null\n  return null;\n};\n\n// Función para comprobar si el juego ha terminado en empate\nexport const checkEndGame = newBoard => {\n  // Comprueba si no hay más espacios vacíos en el tablero\n  return newBoard.every(square => square !== null);\n};","map":{"version":3,"names":["WINNER_COMBOS","checkWinnerFrom","boardToCheck","combo","a","b","c","checkEndGame","newBoard","every","square"],"sources":["C:/Users/eyder andres acalo/Downloads/proyectos_Carlos/proyectos_Carlos/juego_tic_tac_toe/juego/src/logic/board.js"],"sourcesContent":["// Se importa la constante WINNER_COMBOS desde el archivo '../constants.js'\nimport { WINNER_COMBOS } from '../constants.js'\n\n// Función para comprobar si hay un ganador en el tablero\nexport const checkWinnerFrom = (boardToCheck) => {\n  // Itera a través de todas las combinaciones ganadoras\n  // para ver si X u O ganaron\n  for (const combo of WINNER_COMBOS) {\n    const [a, b, c] = combo\n    if (\n      boardToCheck[a] &&\n      boardToCheck[a] === boardToCheck[b] &&\n      boardToCheck[a] === boardToCheck[c]\n    ) {\n      // Retorna el símbolo del ganador (X o O) si se cumple una combinación ganadora\n      return boardToCheck[a]\n    }\n  }\n  // Si no hay ganador, retorna null\n  return null\n}\n\n// Función para comprobar si el juego ha terminado en empate\nexport const checkEndGame = (newBoard) => {\n  // Comprueba si no hay más espacios vacíos en el tablero\n  return newBoard.every((square) => square !== null)\n}\n"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,iBAAiB;;AAE/C;AACA,OAAO,MAAMC,eAAe,GAAIC,YAAY,IAAK;EAC/C;EACA;EACA,KAAK,MAAMC,KAAK,IAAIH,aAAa,EAAE;IACjC,MAAM,CAACI,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGH,KAAK;IACvB,IACED,YAAY,CAACE,CAAC,CAAC,IACfF,YAAY,CAACE,CAAC,CAAC,KAAKF,YAAY,CAACG,CAAC,CAAC,IACnCH,YAAY,CAACE,CAAC,CAAC,KAAKF,YAAY,CAACI,CAAC,CAAC,EACnC;MACA;MACA,OAAOJ,YAAY,CAACE,CAAC,CAAC;IACxB;EACF;EACA;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMG,YAAY,GAAIC,QAAQ,IAAK;EACxC;EACA,OAAOA,QAAQ,CAACC,KAAK,CAAEC,MAAM,IAAKA,MAAM,KAAK,IAAI,CAAC;AACpD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}